# 개미전사 문제 접근방법
# 최적의해를 구하는 경우의 수 n = 4  일때 .
# --> 이 흐름이 이루어져야함
# 식량을 선택할 수 있는 경우의 수는 8가지이다.
# 아무것도 고르지 않을때 / 1번 창고 하나 /2번창고 하나 , /3번 창고하나, /4번창고 하나, /1,3번 창고 둘 /1,4번창고 둘 /2,4번 창고 둘
# 위의 8가지 경우의 수중에 최적의 해는 마지막경우의 수인 8번째 2,4번 창고를 털어서 8이라는 최적해 구해야함

# 다이나믹 프로그래밍에 대한 조건이 성립
# ai = i번째 식량창고까지의 최적의 해(얻을 수 있는 식량의 최댓값) --> 이렇게 정의하면 다이나믹프로그래밍을 적용 가능
# 점화식 표현 ai = max(ai-1, ai-2 + ki)
# 점화식 설명 : ai = i번째 식량창고를 털때 가장 많이 털수 있는 최적값이라면, 1.그 값은 바로 이전까지의 최댓값 & 2. 전전창고까지의 최대값 + i(지금 털어야하는)
# 중 큰 값이 최적값이 될 것이다.
# 즉 i번째 창고를 확인하면서 들어오는 값들은 항상 "그 전까지의 조건에 맞게 창고를 털었을때 얻을수 있는 식량의 최적값"이다.
# 따라서 n개의 창고를 털어본다고 가정을 할때 가장 최적 값은 그 n-1에 저장된 값이 된다.
n = int(input())
array = list(map(int, input().split())) # 모든 식량 정보 입력 받기
# 앞서 계산된 결과를 저장하기 위한 dp테이블 초기화
d = [0] * 100
# 다이나믹프로그래밍진행 (보텀 업)
d[0] = array[0]
d[1] = max(array[0], array[1])
for i in range(2, n):
    d[i] = max(d[i - 1], d[i - 2] + array[i])

print(d[n - 1])
